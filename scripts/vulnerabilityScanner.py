#!/usr/bin/python

import socket, os, chardet
from colors import green, red, reset

host = input("Enter an IP address : ")
port_input = input("Enter ports numbers : ")
ports = []

if port_input == "all":
    for i in range(1000):
        ports.append(i + 1)
else:
    ports = [int(p) for p in port_input.split(",")]


file = input("Enter vulnerability list path : ")


def main():
    if os.path.exists(os.getcwd() + "/wordlists/" + file):
        path = os.getcwd() + "/wordlists/" + file
        if os.access(path, os.R_OK):
            print("Host : " + host)

            if port_input != "all":
                print("Ports list: {}".format(ports))
            else:
                print("Ports list: First 1000 ports")

            for p in ports:
                portscan(host, p, path)
        else:
            print("Access Denied. Check documentation.")
            exit(0)
    else:
        print("File unreachable. Make sure to check documentation.")
        exit(0)


def portscan(host, port, path):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(3)
    try:
        sock.connect((host, port))
        try:
            retBanner(port, sock, path)
        except socket.error:
            print(
                green
                + "Port {} is open. Can't identify service running. ".format(port)
                + reset
            )
    except socket.error:
        if port_input != "all":
            print(red + "Error when scanning port {} : closed".format(port) + reset)


def retBanner(port, sock, path):
    banner = sock.recv(2048)
    result = chardet.detect(banner)
    encoding = result["encoding"]
    if encoding == "ascii" or encoding == "utf8":
        banner = banner.decode(encoding)
        print(green + "Port {} is open with {}".format(port, banner[:-2]) + reset)

        f = open(path, "r")
        for line in f.readlines():
            if line.strip("\n") in banner:
                print(red + banner[:-2] + " is vulnerable." + reset)
    else:
        print(
            green
            + "Port {} is open. Can't identify service running.".format(port)
            + reset
        )


if __name__ == "__main__":
    main()
