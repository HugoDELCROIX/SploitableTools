#!/usr/bin/python

import socket, os, chardet

host = input("Enter an IP address : ")
ports = [int(p) for p in input("Enter ports numbers : ").split(",")]
file = input("Enter vulnerability list path : ")


def main():
    if os.path.exists(os.getcwd() + "/" + file):
        if os.access(file, os.R_OK):
            print("Host : " + host)
            print("Ports list : {}".format(ports))

            for p in ports:
                portscan(host, p)
        else:
            print("Access Denied. Check documentation.")
            exit(0)
    else:
        print("File unreachable. Make sure to check documentation.")
        exit(0)


def portscan(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(3)
    try:
        sock.connect((host, port))
        try:
            retBanner(port, sock)
        except socket.error:
            print(
                "\033[32m"
                + "Port {} is open. Can't indetify service running. ".format(port)
                + "\033[0m"
            )
    except socket.error:
        print(
            "\033[31m" + "Error when scanning port {} : closed".format(port) + "\033[0m"
        )


def retBanner(port, sock):
    banner = sock.recv(2048)
    result = chardet.detect(banner)
    encoding = result["encoding"]
    if encoding == "ascii" or encoding == "utf8":
        banner = banner.decode(encoding)
        print(
            "\033[32m" + "Port {} is open with {}".format(port, banner[:-2]) + "\033[0m"
        )

        f = open(file, "r")
        for line in f.readlines():
            if line.strip("\n") in banner:
                print("\033[31m" + banner[:-2] + " is vulnerable." + "\033[0m")
    else:
        print(
            "\033[32m"
            + "Port {} is open. Can't indetify service running.".format(port)
            + "\033[0m"
        )


if __name__ == "__main__":
    main()
